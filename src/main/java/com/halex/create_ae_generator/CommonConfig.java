package com.halex.create_ae_generator;

import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.fml.event.config.ModConfigEvent;
import net.neoforged.fml.loading.FMLPaths;
import net.neoforged.neoforge.common.ModConfigSpec;


@EventBusSubscriber(modid = CreateAEGenerator.MOD_ID)
public class CommonConfig {
    private static final ModConfigSpec.Builder CONFIG_BUILDER = new ModConfigSpec.Builder();
    public static ModConfigSpec COMMON_CONFIG;

    public static final String CATEGORY_KINETIC_ACCEPTOR = "create_ae_generator";

    public static ModConfigSpec.IntValue MAX_STRESS;
    public static ModConfigSpec.IntValue AE_RPM;

    static {
        CONFIG_BUILDER.comment("Kinetic Acceptor").push(CATEGORY_KINETIC_ACCEPTOR);
        AE_RPM = CONFIG_BUILDER.comment("Max power generated by the Kinetic Acceptor (in AE/t at 256 RPM).")
                .defineInRange("max_AE/t", 640, 0, Integer.MAX_VALUE);
        MAX_STRESS = CONFIG_BUILDER.comment("Max stress for the Kinetic Acceptor (in SU at 256 RPM).")
                .defineInRange("max_stress", 16384, 0, Integer.MAX_VALUE);
        CONFIG_BUILDER.pop();

        COMMON_CONFIG = CONFIG_BUILDER.build();
    }

    public static void loadConfig(ModConfigSpec spec, java.nio.file.Path path) {
        final CommentedFileConfig configData = CommentedFileConfig.builder(path)
                .sync()
                .autosave()
                .writingMode(WritingMode.REPLACE)
                .build();
        configData.load();
        spec.correct(configData);
    }

    @SubscribeEvent
    public static void onLoad(ModConfigEvent.Loading event) {
        CommonConfig.loadConfig(CommonConfig.COMMON_CONFIG, FMLPaths.CONFIGDIR.get().resolve("CreateEnergistics2-common.toml"));
    }
}
